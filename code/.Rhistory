y_train = train_data['cancer']
X_test = test_data.drop(['cancer', 'training', 'count'], axis=1)
y_test = test_data['cancer']
# Initialize and train the logistic regression model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
# Predict on the test set
y_pred = model.predict(X_test)
# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)
conf_matrix
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# Load the data from the CSV file
risk_data = pd.read_csv('../dataset/risk_estimation_clean_new.csv')
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
# Load the data from the CSV file
risk_data = pd.read_csv('../dataset/risk_estimation_clean_new.csv')
reticulate::repl_python()
# Save the data to a CSV file
write.csv(data, "../dataset/risk_estimation_clean_new.csv.csv", row.names = FALSE)
reticulate::repl_python()
# Load library for R
library(tidyverse)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
# Check the data type for each column
str(data)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Save the data to a CSV file
write.csv(data_clean, "../dataset/risk_estimation_clean_new.csv", row.names = FALSE)
reticulate::repl_python()
# Load library for R
library(tidyverse)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
# Check the data type for each column
str(data)
# Load library for R
library(tidyverse)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
# Check the data type for each column
str(data)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
str(data_clean_pre)
data_clean_pre <- data |>
drop(training, invasive, count)
data_clean_pre <- data_clean_pre |> select(-training, -invasive, -count)
View(data_clean_pre)
View(data_clean)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
data_clean_pre <- data_clean_pre |> select(-training, -cancer, -count)
View(data_clean_pre)
data_clean_pre <- data_clean_pre |> select(-training, -cancer, -count)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
data_clean_pre <- data_clean_pre |> select(-training, -cancer, -count)
str(data_clean_pre)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_pre), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_pre[[var]], data_clean_pre$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results <- rbind(results, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
data_clean_pre <- data_clean_pre |> select(-menopaus, -training, -cancer, -count)
str(data_clean_pre)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_pre), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_pre[[var]], data_clean_pre$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results <- rbind(results, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results)
# Load library for R
library(tidyverse)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
data_clean_pre <- data |>
filter(menopaus == 0)
data_clean_pre <- data_clean_pre |> select(-menopaus, -training, -cancer, -count)
str(data_clean_pre)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_pre), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_pre[[var]], data_clean_pre$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results <- rbind(results, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results)
View(test)
View(results)
View(data_clean_pre)
View(data)
# Load library for R
library(tidyverse)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
# Check the data type for each column
str(data)
data_clean_pre <- data |>
filter(menopaus == 0)
View(data_clean_pre)
data_clean_pre <- data_clean_pre |> select(-menopaus, -training, -cancer, -count)
str(data_clean_pre)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_pre), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_pre[[var]], data_clean_pre$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results <- rbind(results, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results)
View(results)
View(data_clean_pre)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
data_clean_pre <- data_clean_pre |> select(-menopaus, -training, -cancer, -count)
str(data_clean_pre)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_pre), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_pre[[var]], data_clean_pre$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results <- rbind(results, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results)
data_clean_post <- data_clean_post |> select(-menopaus, -training, -cancer, -count)
str(data_clean_post)
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_post), "invasive")
# Initialize a data frame to store results
results <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_post[[var]], data_clean_post$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results_post <- rbind(results_post, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# List of variables to test against 'invasive' (excluding 'invasive' itself)
variables <- setdiff(names(data_clean_post), "invasive")
# Initialize a data frame to store results
results_post <- data.frame(Variable = character(),
ChiSquare = numeric(),
DF = integer(),
PValue = numeric(),
stringsAsFactors = FALSE)
# Perform Chi-square test for each variable
for (var in variables) {
# Create a contingency table for 'invasive' and the current variable
tab <- table(data_clean_post[[var]], data_clean_post$invasive)
# Perform the chi-square test
test <- chisq.test(tab, correct = FALSE) # 'correct = FALSE' turns off Yates' continuity correction
# Store the results
results_post <- rbind(results_post, data.frame(Variable = var,
ChiSquare = test$statistic,
DF = test$parameter,
PValue = test$p.value))
}
# Print the results data frame
print(results_post)
# Load library for R
library(tidyverse)
library(glmnet)
m1<- glm('invasive'~ ., data = data_clean_pre, family=binomial(link="logit"))
m1<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
View(m1)
summary(m1)
fit_pre<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
summary(fit_pre)
fit_pre<- glm(invasive~ ., data = data_clean_pre, family=binomial)
summary(fit_pre)
summary(fit_pre)
fit_pre<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
summary(fit_pre)
fit_pre<- glm(invasive~ ., data = data_clean_pre, family=binomial)
summary(fit_pre)
fit_pre<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
summary(fit_pre)
model<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
summary(model)
library(car)
library(caret)
library(ROCR)
install.packages("ROCR")
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
vif(model)
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
vif(model)
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
vif(model)
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
VIF(model)
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
vif(model)
summary(model)$aliased
summary(model)
data_clean_pre <- data_clean_pre |> select(-surgmeno, -hrt)
str(data_clean_pre)
model<- glm(invasive~ ., data = data_clean_pre, family=binomial(link="logit"))
library(car)
library(caret)
library(ROCR)
# Checking for multicollinearity
vif(model)
# Influence Plot
influencePlot(model)
# Predictions and Confusion Matrix
predicted_probs <- predict(model, type = "response")
predictions <- ifelse(predicted_probs > 0.5, 1, 0)
confusionMatrix(factor(predictions), factor(data_clean_pre$invasive))
# ROC Curve
pred <- prediction(predicted_probs, data_clean_pre$invasive)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
auc <- performance(pred, measure = "auc")
auc@y.values[[1]]
# Load library for R
library(tidyverse)
library(glmnet)
# Read the txt file
data <- read.table('../dataset/risk.txt', header = FALSE, sep = "", na.strings = "NA")
# Assign the column names
colnames(data) <- c("menopaus", "agegrp", "density", "race", "Hispanic", "bmi", "agefirst",
"nrelbc", "brstproc", "lastmamm", "surgmeno", "hrt", "invasive",
"cancer", "training", "count")
head(data)
# Check for the NA values
na_count <- sum(is.na(data))
print(na_count)
# Load library for R
library(tidyverse)
library(glmnet)
library(car)
library(caret)
library(ROCR)
# Read the txt file
data <- read.table('../dataset/risk_estimation_clean.csv')
# Read the txt file
data <- read.csv('../dataset/risk_estimation_clean.csv')
head(data)
View(data)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Load library for R
library(tidyverse)
library(glmnet)
library(car)
library(caret)
library(ROCR)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
View(data_clean)
# Create the Premenopausal women Group
data_clean_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
data_clean_post <- data_clean |>
filter(menopaus == 1)
# Read the txt file
data <- read.csv('../dataset/risk_estimation_clean.csv')
head(data)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Create the Premenopausal women Group
women_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
women_post <- data_clean |>
filter(menopaus == 1)
# Drop columns 'cancer' bacuse it is similar to the column 'invasive'
women_pre <- women_pre |> select(-menopaus, -training, -cancer, -count)
str(women_pre)
pre_model<- glm(invasive~ ., data = women_pre, family=binomial(link="logit"))
pre_model<- glm(invasive~ ., data = women_pre, family=binomial(link="logit"))
summary(pre_model)
summary(pre_model)
# Drop column that are not important
women_pre_new <- women_pre |> select(-surgmeno, -hrt, -density, -agefirst)
str(women_pre_new)
model<- glm(invasive~ ., data = women_pre_new, family=binomial(link="logit"))
pre_model_new<- glm(invasive~ ., data = women_pre_new, family=binomial(link="logit"))
summary(pre_model_new)
# Drop columns 'cancer' bacuse it is similar to the column 'invasive'
women_post <- women_post |> select(-menopaus, -training, -cancer, -count)
str(women_post)
post_model<- glm(invasive~ ., data = women_post, family=binomial(link="logit"))
summary(post_model)
# Load library for R
library(tidyverse)
library(glmnet)
# Load library for R
library(tidyverse)
library(glmnet)
# Read the txt file
data <- read.csv('../dataset/risk_estimation_clean.csv')
head(data)
# Filter the unknown for column 'menopaus' for better split the demographic into two group
# Filter the unknown for some column to make the data more intuitive
data_clean <- data |>
filter(menopaus != 9, race!= 9, Hispanic!= 9, bmi != 9, agefirst != 9, nrelbc != 9, brstproc != 9, lastmamm != 9)
# Create the Premenopausal women Group
women_pre <- data_clean |>
filter(menopaus == 0)
# Create the Postmenopausal women Group
women_post <- data_clean |>
filter(menopaus == 1)
# Drop columns 'cancer' bacuse it is similar to the column 'invasive'
women_pre <- women_pre |> select(-menopaus, -training, -cancer, -count)
str(women_pre)
pre_model<- glm(invasive~ ., data = women_pre, family=binomial(link="logit"))
summary(pre_model)
# Drop column that are not important
women_pre_new <- women_pre |> select(-surgmeno, -hrt, -density, -agefirst)
str(women_pre_new)
pre_model_new<- glm(invasive~ ., data = women_pre_new, family=binomial(link="logit"))
summary(pre_model_new)
# Drop columns 'cancer' bacuse it is similar to the column 'invasive'
women_post <- women_post |> select(-menopaus, -training, -cancer, -count)
str(women_post)
post_model<- glm(invasive~ ., data = women_post, family=binomial(link="logit"))
summary(post_model)
